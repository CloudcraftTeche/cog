version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: edu_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: edu_messaging
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - edu_network

  # Redis (for caching)
  redis:
    image: redis:7.2-alpine
    container_name: edu_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - edu_network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: edu_rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - edu_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Backend API
  backend:
    build: ./backend
    container_name: edu_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb+srv://codewithdarshan45:u9o4wv2Rfiq4kwoL@cluster0.3auizq0.mongodb.net/scriptureschool?retryWrites=true&w=majority&appName=Cluster0
      REDIS_URL: redis://:redis_password@redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672/
      JWT_SECRET: redis-11514.crce214.us-east-1-3.ec2.redns.redis-cloud.com:11514
      CLOUDINARY_CLOUD_NAME: dz95uyedy
      CLOUDINARY_API_KEY: your_cloudinary_api_key
      CLOUDINARY_API_SECRET: 479151412264324
      FRONTEND_URL: http://localhost:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - edu_network
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build: ./frontend
    container_name: edu_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
      NODE_ENV: production
    networks:
      - edu_network
    depends_on:
      - backend

  # Nginx (Load Balancer/Reverse Proxy)
  nginx:
    image: nginx:1.25-alpine
    container_name: edu_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - edu_network
    depends_on:
      - frontend
      - backend

  # Message Queue Worker
  queue_worker:
    build: ./backend
    container_name: edu_queue_worker
    restart: unless-stopped
    command: npm run worker
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/edu_messaging?authSource=admin
      REDIS_URL: redis://:redis_password@redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672/
      CLOUDINARY_CLOUD_NAME: your_cloudinary_cloud_name
      CLOUDINARY_API_KEY: your_cloudinary_api_key
      CLOUDINARY_API_SECRET: your_cloudinary_api_secret
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - edu_network
    depends_on:
      - mongodb
      - redis
      - rabbitmq

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:

networks:
  edu_network:
    driver: bridge